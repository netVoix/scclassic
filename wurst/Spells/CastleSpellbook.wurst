package CastleSpellbook

import AbilityObjEditing
import ObjectIds
import Antihero
import RegisterEvents

public let CASTLE_SPELLBOOK_ID = 'A0CV'
let CASTLE_TRUE_SIGHT_AURA = 'A322'

@compiletime function createCastleSpellbook()
    new AbilityDefinitionSpellBook(CASTLE_SPELLBOOK_ID)
    ..setLevels(5)
    ..presetMaximumSpells(lvl -> 11)
    ..presetMinimumSpells(lvl -> 11)
    ..presetSharedSpellCooldown(lvl -> false)
    ..presetSpellList(lvl -> commaList(ANTIHERO_DAMAGE_REDUCTION_ID, CASTLE_TRUE_SIGHT_AURA))

let castles = [X, O, R, I]

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
        let u = GetTriggerUnit()
        let p = GetTriggerPlayer()
        if (u.hasAbility(CASTLE_SPELLBOOK_ID))
            let rlvl = GetPlayerTechCountSimple(ANTIHERO_DAMAGE_REDUCTION_UPGRADE_ID, p)
            u.removeAbility(CASTLE_SPELLBOOK_ID)
            u.addAbility(CASTLE_SPELLBOOK_ID)
            u.setAbilityLevel(ANTIHERO_DAMAGE_REDUCTION_ID, rlvl + 1)
            u.getOwner().setAbilityAvailable(CASTLE_SPELLBOOK_ID, false)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH) ->
        let r = GetResearched()
        let p = GetTriggerPlayer()
        if r == ANTIHERO_DAMAGE_REDUCTION_UPGRADE_ID
            let rlvl = GetPlayerTechCountSimple(r, p)
            for i = 0 to 3
                if castles[i].getOwner() == p
                    castles[i].setAbilityLevel(ANTIHERO_DAMAGE_REDUCTION_ID, rlvl + 1)



    