package RegisterRace

import ClosureEvents
import ClosureForGroups
import RaceBuildingTemplates
import LinkedList

public tuple raceBuildings(int fortId, int barrackId, int towerId, int foundationId)
public tuple raceUnits(int meeleeId, int rangeId, int mageId)

let timers = new LinkedList<timer>()..add(EV, UV, WV, XV, SV, TV, MV, LV, OV, QV, PV, RV)
let barracks = new LinkedList<unit>()..add(A, N, L, K, J, H, G, F, D, C, B, M)
raceUnits array playerUnits

function onSpawnTimerExpire()
    let t = GetExpiredTimer()
    if timers.has(t)
        let b = barracks.get(timers.indexOf(t))
        let p = b.getOwner()
        let units = playerUnits[p.getId()]
        for i = 0 to 1
            createUnit(p, units.meeleeId, b.getPos(), angle(180))
        createUnit(p, units.rangeId, b.getPos(), angle(180))
        createUnit(p, units.mageId, b.getPos(), angle(180))
        

function buildAllStuff(player p, raceBuildings buildings)
    forUnitsOfPlayer(p) u ->
        let ut = u.getTypeId()
        if ut == BARRACK_TEMPLATE_ID or ut == TOWER_TEMPLATE_ID or ut == FOUNDATION_TEMPLATE_ID
        let order = ut == BARRACK_TEMPLATE_ID ? buildings.barrackId : (ut == TOWER_TEMPLATE_ID ? buildings.towerId : buildings.foundationId)
        u.issueImmediateOrderById(order)
        if barracks.has(u)
            let tim = timers.get(barracks.indexOf(u))
            CreateTrigger()..registerTimerExpireEvent(tim)..addCondition(Condition(function onSpawnTimerExpire))

public function registerRace(raceBuildings buildings, raceUnits units)
    EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
        let tu = GetTriggerUnit()
        let p = GetTriggerPlayer()
        if tu.getTypeId() == buildings.fortId
            playerUnits[p.getId()] = units
            buildAllStuff(p, buildings)
